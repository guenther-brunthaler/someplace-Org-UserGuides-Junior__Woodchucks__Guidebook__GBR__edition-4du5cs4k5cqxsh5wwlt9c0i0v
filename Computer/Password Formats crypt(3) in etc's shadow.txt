The 2nd ":"-separated field in /etc/shadow and /etc/gshadow contains UNIX password hashes.

The fields can also contain "*" for accounts which never got a password, or "!" for accounts which explicitly do not have a password (and shall not allow any login). On the other hand, if a password hash field is empty, an empty password will be set and allow a user to log in by just pressing enter at the password prompt.

If the field starts with a character from the base-64 alphabet ("a".."z", "A".."Z", "0".."9", ".", "/"), it is an old-style DES-encrypted password:

<DES_salt><DES_hash>

where

<DES_salt> is a two-characters salt, providing one of 4096 possible salts.

<DES_hash> is a string at least 11 base-64 characters long, representing the 64 output bits of the last DES iteration. The string may be longer, but only the first 11 characters are used in for password matching. <DES_hash> is derived by first extracting the lower 7 bits of the first 8 characters of the password (ignoring the rest), forming a 56-bit DES key. A constant initial value (usually all bits zero) is then encrypted with that key in several iterations (25 in the traditional UNIX version). The salt is used directly to modify the DES algorithm internally; it is thus neither part of the key nor of the data to be encrypted.

Otherwise, if the string starts with "$", it is a new-style hash and uses one of the following general formats:

$<method>$<salt>$<hash>
$<method>$rounds=<nrounds>$<salt>$<hash>
$<method>$<params>$<salt>$<hash>

where <method> is one of the following (at least on Linux):

_: BSDi - looks similar to DES hashes, but a bit longer (20 characters). It uses 24 bits for the salt and a variable number of iterations encoded as a 24-bit number concatenated with the hash. It allows longer passwords than 8 characters, using DES to fold the password down to 8 words of 7 bit each.
1: MD5
2, 2a, 2x, 2y: Blowfish (not in mainline glibc; added in some Linux distributions), normally some variant of bcrypt. The latter methods are mostly bug-fixed of the earlier ones.
3: NTHASH (MD4-derived hash function used by Microsoft's NT LAN Manager)
5: SHA2-256 (since glibc 2.7)
6: SHA2-512 (since glibc 2.7)
md5: Solaris MD5 (supporting the "round="-parameter defaulting to 5000)
sha1: PBKDF1 with SHA-1, seems to use an iteration count (defaulting to 40000) as <params>

<nrounds> is the number of hashing iterations. It defaults to 5000 when using the SHA2 format variant that does not specifiy <nrounds>. Values from 1000 through 999,999,999 are allowed.

<params> is an optional parameter set. Its interpretation depends on <method>, but is a generalisation of the <nrounds>-syntax for most methods. It usually allows to specify any number of <key>=<value> pairs, separated by ",", to be specified as parameters to the password derivation function. Obviously, the characters "$", "=" and "," should be avoided within <key> and <value>.

<salt> stands for the up to 16 characters to be used as the salt (up to 96 bit) for hashing.

<SHA2_hash> represents the salted hash itself. The number of characters in this string is fixed as ceiling(log(2 ** bits) / log(64)):

MD5: 22
SHA2-256: 43
SHA2-512: 86

The characters in <salt>, <DES_hash> and <hash> are taken from the same alphabet as the <DES_salt>. In the MD5 and SHA2 implementations, however, the entire key is significant (instead of only the first 8 bytes in DES).

The SHA hashes are calculated using a rather mindboggingly complicated scheme explained in

https://www.akkadia.org/drepper/SHA-crypt.txt

An implementation can also be found in the 'BusyBox' source file "`pw_encrypt_sha.c`".

However, the important thing is that all the bits from the the password and salt affect the resulting hash.

For more details about crypt(3) see

https://en.wikipedia.org/wiki/Crypt_%28C%29
